{"version":3,"sources":["components/EmployeeCard/index.js","components/Wrapper/index.js","components/Title/index.js","components/Sort/index.js","components/Filter/index.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeCard","props","className","alt","name","src","image","id","department","email","onClick","removeEmployee","Wrapper","children","Title","Sort","sortEmployee","Filter","value","filterEmployee","document","getElementById","App","state","employees","filter","employee","setState","console","log","sort","key","order","a","b","hasOwnProperty","varA","toUpperCase","varB","comparison","compareValues","this","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cd2206d9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction EmployeeCard(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n      <div className=\"content\">\n        <ul>\n          <li>\n            <strong>Name:</strong> {props.name}\n          </li>\n          <li>\n            <strong>Id:</strong> {props.id}\n          </li>\n          <li>\n            <strong>Department:</strong> {props.department}\n          </li>\n          <li>\n            <strong>Email:</strong> {props.email}\n          </li>\n        </ul>\n      </div>\n      <span onClick={() => props.removeEmployee(props.id)} className=\"remove\">\n        ùòÖ\n      </span>\n    </div>\n  );\n}\n\nexport default EmployeeCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Sort(props) {\r\n  return (\r\n    <div className=\"col\">\r\n      <div className=\"row\">\r\n   <button className=\"buttonDesc\" onClick={() => props.sortEmployee()} >\r\n     Sort Desc\r\n   </button>\r\n    </div>\r\n    </div>\r\n   );\r\n}\r\n\r\nexport default Sort;","import React from \"react\";\r\n// import \"./style.css\";\r\n\r\nfunction Filter(props) {\r\n  return (\r\n      <div className=\"col\">\r\n      <div className=\"row\">\r\n    <label>Filter by Department:</label>\r\n\r\n    <select id=\"myFilter\">\r\n      <option value=\"Marketing\">Marketing</option>\r\n      <option value=\"Sales\">Sales</option>\r\n      <option value=\"Engineering\">Engineering</option>\r\n      <option value=\"Finance\">Finance</option>\r\n      <option value=\"CEO\">CEO</option>\r\n    </select>\r\n    {/* {console.log(document.getElementById(\"myFilter\").value)} */}\r\n    <button className=\"filter\" onClick={() => props.filterEmployee(document.getElementById(\"myFilter\").value)} >\r\n     Filter\r\n   </button>\r\n    </div>\r\n    </div>\r\n   );\r\n}\r\n\r\nexport default Filter;","import React, { Component } from 'react';\nimport EmployeeCard from \"./components/EmployeeCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Sort from \"./components/Sort\";\nimport Filter from \"./components/Filter\"\nimport employees from \"./employees.json\";\n\n\nclass App extends Component {\n  // Setting this.state.employees to the employees json array\n  state = {\n    employees\n  };\n\n  removeEmployee = id => {\n    // Filter this.state.employees for employees with an id not equal to the id being removed\n    const employees = this.state.employees.filter(employee => employee.id !== id);\n    // Set this.state.employees equal to the new employees array\n    this.setState({ employees });\n  };\n\n  sortEmployee = () => {\n    console.log(\"sorting descendent\")\n    employees.sort(compareValues('id', 'desc'));\n    function compareValues(key, order = 'asc') {\n      return function innerSort(a, b) {\n        if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n          // property doesn't exist on either object\n          return 0;\n        }\n    \n        const varA = (typeof a[key] === 'string')\n          ? a[key].toUpperCase() : a[key];\n        const varB = (typeof b[key] === 'string')\n          ? b[key].toUpperCase() : b[key];\n    \n        let comparison = 0;\n        if (varA > varB) {\n          comparison = 1;\n        } else if (varA < varB) {\n          comparison = -1;\n        }\n        return (\n          (order === 'desc') ? (comparison * -1) : comparison\n        );\n      };\n    }\n    \n    this.setState({ employees });\n  };\n\n  filterEmployee = department => {\n    console.log(\"filtering by: \", department)\n   \n    const employees = this.state.employees.filter(employee => employee.department === department);\n    this.setState({ employees });\n  };\n\n  // Map over this.state.employees and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <div className=\"row\">\n        <div className=\"column\">\n        <Title>Employees List</Title>\n        <Sort\n         sortEmployee={this.sortEmployee}\n         />\n        <Filter\n        filterEmployee={this.filterEmployee}\n        />\n        </div>\n        </div>\n        \n         <div className=\"row\">\n\n        {this.state.employees.map(employee => (\n          <EmployeeCard\n          \n          removeEmployee={this.removeEmployee}\n          id={employee.id}\n          key={employee.id}\n          name={employee.name}\n          image={employee.image}\n          department={employee.department}\n          email={employee.email}\n          />\n          ))}\n          </div>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}